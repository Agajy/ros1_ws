<launch>
  <!-- Arguments -->
  <!-- <arg name="in_simu" default="false" doc="Set to true for simulation (uses localhost)" />
  <arg name="host" default="172.26.209.28" doc="TCP server IP address (ignored if in_simu is true)" />
  <arg name="port" default="62734" doc="TCP server port" />
  <arg name="save" default="false" doc="Save frames to disk" />
  <arg name="save_dir" default="$(find vision_processing)/frames" doc="Directory to save frames" />
  <arg name="display" default="true" doc="Display images in OpenCV windows" /> -->
  <rosparam command="load" file="$(find trajectory)/config/simulation_parameters.yaml"/>
  <arg name="in_simu" default="false" doc="Set to true for simulation (uses localhost)" />
  <arg name="host" default="172.26.209.28" doc="TCP server IP address (ignored if in_simu is true)" />
  <arg name="host_simu" default="127.0.0.1" doc="optitrack port simulation" />

  <arg name="port" default="62734" doc="TCP server port" />
  <arg name="port_command_uav" default="62732" doc="TCP server port" />
  <arg name="port_command_ugv" default="62736" doc="TCP server port" />
  <arg name="port_optitrack" default="62731" doc="TCP server port" />
  <arg name="port_rec_command_uav" default="62733" doc="TCP server port for recording UAV commands" />
  <arg name="port_rec_command_ugv" default="62735" doc="TCP server port for recording UGV commands" />

  <arg name="object_uav" default="Drone_0" doc="Object to detect" />
  <arg name="object_ugv" default="ugv" doc="Object to detect" />


  <arg name="save" default="false" doc="Save frames to disk" />
  <arg name="save_dir" default="$(find vision_processing)/frames" doc="Directory to save frames" />
  <arg name="display" default="true" doc="Display images in OpenCV windows" />


  <!-- TCP Image Stream Node -->
  <node name="image_tcp_client" pkg="vision_processing" type="image_tcp_client.py" output="screen">
    <param name="in_simu" value="$(arg in_simu)" />
    <param name="host" value="$(arg host)" />
    <param name="port" value="$(arg port)" />
    <param name="save" value="$(arg save)" />
    <param name="save_dir" value="$(arg save_dir)" />
    <param name="display" value="$(arg display)" />
  </node>

  <node name="image_detector" pkg="vision_processing" type="image_detector.py" output="screen">
  </node>

  <node name="send_uav_command" pkg="commands" type="send_tcp_command.py" output="screen">
    <param name="in_simu" value="$(arg in_simu)" />
    <param name="host" value="$(arg host)" />
    <param name="port" value="$(arg port_command_uav)" />
    <param name="object_to_command" value="$(arg object_uav)" />
  </node>

  <node name="send_ugv_command" pkg="commands" type="send_tcp_command.py" output="screen">
    <param name="in_simu" value="$(arg in_simu)" />
    <param name="host" value="$(arg host)" />
    <param name="port" value="$(arg port_command_ugv)" />
    <param name="object_to_command" value="$(arg object_ugv)" />
  </node>

  <!-- Noeud de réception des positions des objets simulé sur FL-AIR en simulation-->
  <node name="optitrack_simu" pkg="simulation_flair" type="tcp_optitrack.py" output="screen">
    <param name="host" value="$(arg host_simu)" />
    <param name="port" value="$(arg port_optitrack)" />
  </node>

  <!-- Programe principal Node -->
  <node name="decision" pkg="decision" type="prog_principal.py" output="screen">
    <param name="uav" value="$(arg object_uav)" />
    <param name="ugv" value="$(arg object_ugv)" />
    <param name="in_simu" value="$(arg in_simu)" />
    <param name="path_excel_file" value="$(find pd_controller)/config/output.xlsx"/>
  </node>

  <!-- Noeud de suivi de ligne -->
  <node name="line_follower" pkg="vision_processing" type="line_follower_ibvs.py" output="screen">
  </node>

 <!-- Noeud de suivi de tag aruco -->
  <node name="tag_follower" pkg="vision_processing" type="ibvs_tag.py" output="screen">
  </node>



  <!-- Noeud d'enregistrement des poses -->
  <node name="pose_recorder" pkg="save_data" type="pose_recorder.py" output="screen">
      <rosparam param="topics">
          - /vrpn_client_node/Drone_0/pose
          - /vrpn_client_node/ugv/pose
          - /rec_command/Drone_0/command
          - /rec_command/ugv/command
      </rosparam>
      <param name="output_dir" value="$(env HOME)/pose_recordings" />
  </node>
  
  <!-- Interface graphique pour contrôler l'enregistrement -->
  <node name="pose_recorder_gui" pkg="save_data" type="pose_recorder_gui.py" output="screen" />

  <!-- Noeud reception command UAV pour enregistrement -->
  <node name="tcp_rec_command_uav" pkg="save_data" type="tcp_rec_command.py" output="screen">
    <param name="in_simu" value="$(arg in_simu)" />
    <param name="host" value="$(arg host)" />
    <param name="port" value="$(arg port_rec_command_uav)" />
    <param name="object" value="$(arg object_uav)" />
  </node>

  <!-- Noeud reception command UAV pour enregistrement -->
  <node name="tcp_rec_command_ugv" pkg="save_data" type="tcp_rec_command.py" output="screen">
    <param name="in_simu" value="$(arg in_simu)" />
    <param name="host" value="$(arg host)" />
    <param name="port" value="$(arg port_rec_command_ugv)" />
    <param name="object" value="$(arg object_ugv)" />
  </node>


  <!-- <rosparam command="load" file="$(find pd_controller)/config/parameters.yaml"/> -->

  <!-- To retrieve OptiTrack data -->
  <arg name="server" default="172.26.213.1"/>
  <node pkg="vrpn_client_ros" type="vrpn_client_node" name="vrpn_client_node" output="screen">
  <rosparam subst_value="true">
      server: $(arg server)
      port: 3883
      frame_id: 1
      broadcast_tf: true
      # Must either specify refresh frequency > 0.0, or a list of trackers to create
      refresh_tracker_frequency: 1.0
      #trackers:
      #- FirstTracker
      #- SecondTracker
  </rosparam>
  </node>
  
  <node name="main_node" pkg="steering_car_pd" type="jetcar_pd_controller.py" output="screen">
    <param name="ugv" value="$(arg object_ugv)" />
    <param name="in_simu" value="$(arg in_simu)" />
  </node>

  <!-- <node name="trajectory_node" pkg="trajectory" type="trajectory_node.py" output="screen">
  </node> -->

</launch>